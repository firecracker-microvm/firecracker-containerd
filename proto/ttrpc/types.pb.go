// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Message to store bundle/config.json bytes
type ExtraData struct {
	JsonSpec             []byte     `protobuf:"bytes,1,opt,name=JsonSpec,json=jsonSpec,proto3" json:"JsonSpec,omitempty"`
	RuncOptions          *types.Any `protobuf:"bytes,2,opt,name=RuncOptions,json=runcOptions,proto3" json:"RuncOptions,omitempty"`
	StdinPort            uint32     `protobuf:"varint,3,opt,name=StdinPort,json=stdinPort,proto3" json:"StdinPort,omitempty"`
	StdoutPort           uint32     `protobuf:"varint,4,opt,name=StdoutPort,json=stdoutPort,proto3" json:"StdoutPort,omitempty"`
	StderrPort           uint32     `protobuf:"varint,5,opt,name=StderrPort,json=stderrPort,proto3" json:"StderrPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExtraData) Reset()      { *m = ExtraData{} }
func (*ExtraData) ProtoMessage() {}
func (*ExtraData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *ExtraData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraData.Merge(m, src)
}
func (m *ExtraData) XXX_Size() int {
	return m.Size()
}
func (m *ExtraData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraData proto.InternalMessageInfo

// Message to specify the various Firecracker VM configurations for a task
type FirecrackerConfig struct {
	RuncOptions       *types.Any                       `protobuf:"bytes,1,opt,name=RuncOptions,json=runcOptions,proto3" json:"RuncOptions,omitempty"`
	NetworkInterfaces []*FirecrackerNetworkInterface   `protobuf:"bytes,2,rep,name=NetworkInterfaces,json=networkInterfaces,proto3" json:"NetworkInterfaces,omitempty"`
	KernelImagePath   string                           `protobuf:"bytes,3,opt,name=KernelImagePath,json=kernelImagePath,proto3" json:"KernelImagePath,omitempty"`
	KernelArgs        string                           `protobuf:"bytes,4,opt,name=KernelArgs,json=kernelArgs,proto3" json:"KernelArgs,omitempty"`
	MachineCfg        *FirecrackerMachineConfiguration `protobuf:"bytes,5,opt,name=MachineCfg,json=machineCfg,proto3" json:"MachineCfg,omitempty"`
	RootDrive         *FirecrackerDrive                `protobuf:"bytes,6,opt,name=RootDrive,json=rootDrive,proto3" json:"RootDrive,omitempty"`
	// Specifies the additional block device config for the VM. Note that
	// the snapshotter used might itself present block devices to the be
	// attached to the VM. This fields allows additional block devices to
	// that list.
	AdditionalDrives     []*FirecrackerDrive `protobuf:"bytes,7,rep,name=AdditionalDrives,json=additionalDrives,proto3" json:"AdditionalDrives,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FirecrackerConfig) Reset()      { *m = FirecrackerConfig{} }
func (*FirecrackerConfig) ProtoMessage() {}
func (*FirecrackerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *FirecrackerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirecrackerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirecrackerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirecrackerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerConfig.Merge(m, src)
}
func (m *FirecrackerConfig) XXX_Size() int {
	return m.Size()
}
func (m *FirecrackerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerConfig proto.InternalMessageInfo

// Message to specify network config for a Firecracker VM
type FirecrackerNetworkInterface struct {
	MacAddress           string                  `protobuf:"bytes,1,opt,name=MacAddress,json=macAddress,proto3" json:"MacAddress,omitempty"`
	HostDevName          string                  `protobuf:"bytes,2,opt,name=HostDevName,json=hostDevName,proto3" json:"HostDevName,omitempty"`
	AllowMMDS            bool                    `protobuf:"varint,3,opt,name=AllowMMDS,json=allowMMDS,proto3" json:"AllowMMDS,omitempty"`
	InRateLimiter        *FirecrackerRateLimiter `protobuf:"bytes,4,opt,name=InRateLimiter,json=inRateLimiter,proto3" json:"InRateLimiter,omitempty"`
	OutRateLimiter       *FirecrackerRateLimiter `protobuf:"bytes,5,opt,name=OutRateLimiter,json=outRateLimiter,proto3" json:"OutRateLimiter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerNetworkInterface) Reset()      { *m = FirecrackerNetworkInterface{} }
func (*FirecrackerNetworkInterface) ProtoMessage() {}
func (*FirecrackerNetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *FirecrackerNetworkInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirecrackerNetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirecrackerNetworkInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirecrackerNetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerNetworkInterface.Merge(m, src)
}
func (m *FirecrackerNetworkInterface) XXX_Size() int {
	return m.Size()
}
func (m *FirecrackerNetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerNetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerNetworkInterface proto.InternalMessageInfo

// Message to set the machine config for a Firecracker VM
type FirecrackerMachineConfiguration struct {
	CPUTemplate string `protobuf:"bytes,1,opt,name=CPUTemplate,json=cPUTemplate,proto3" json:"CPUTemplate,omitempty"`
	HtEnabled   bool   `protobuf:"varint,2,opt,name=HtEnabled,json=htEnabled,proto3" json:"HtEnabled,omitempty"`
	// Specifies the memory size of VM
	// This lets us create a Firecracker VM of up to 4096 TiB, which
	// for a mircroVM should be large enough
	MemSizeMib           uint32   `protobuf:"varint,3,opt,name=MemSizeMib,json=memSizeMib,proto3" json:"MemSizeMib,omitempty"`
	VcpuCount            uint32   `protobuf:"varint,4,opt,name=VcpuCount,json=vcpuCount,proto3" json:"VcpuCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerMachineConfiguration) Reset()      { *m = FirecrackerMachineConfiguration{} }
func (*FirecrackerMachineConfiguration) ProtoMessage() {}
func (*FirecrackerMachineConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}
func (m *FirecrackerMachineConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirecrackerMachineConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirecrackerMachineConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirecrackerMachineConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerMachineConfiguration.Merge(m, src)
}
func (m *FirecrackerMachineConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *FirecrackerMachineConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerMachineConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerMachineConfiguration proto.InternalMessageInfo

// Message to specify the block device config for a Firecracker VM
type FirecrackerDrive struct {
	IsReadOnly           bool                    `protobuf:"varint,1,opt,name=IsReadOnly,json=isReadOnly,proto3" json:"IsReadOnly,omitempty"`
	IsRootDevice         bool                    `protobuf:"varint,2,opt,name=IsRootDevice,json=isRootDevice,proto3" json:"IsRootDevice,omitempty"`
	Partuuid             string                  `protobuf:"bytes,3,opt,name=Partuuid,json=partuuid,proto3" json:"Partuuid,omitempty"`
	PathOnHost           string                  `protobuf:"bytes,4,opt,name=PathOnHost,json=pathOnHost,proto3" json:"PathOnHost,omitempty"`
	RateLimiter          *FirecrackerRateLimiter `protobuf:"bytes,5,opt,name=RateLimiter,json=rateLimiter,proto3" json:"RateLimiter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerDrive) Reset()      { *m = FirecrackerDrive{} }
func (*FirecrackerDrive) ProtoMessage() {}
func (*FirecrackerDrive) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}
func (m *FirecrackerDrive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirecrackerDrive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirecrackerDrive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirecrackerDrive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerDrive.Merge(m, src)
}
func (m *FirecrackerDrive) XXX_Size() int {
	return m.Size()
}
func (m *FirecrackerDrive) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerDrive.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerDrive proto.InternalMessageInfo

// Message to specify an IO rate limiter with bytes/s and ops/s limits
type FirecrackerRateLimiter struct {
	Bandwidth            *FirecrackerTokenBucket `protobuf:"bytes,1,opt,name=Bandwidth,json=bandwidth,proto3" json:"Bandwidth,omitempty"`
	Ops                  *FirecrackerTokenBucket `protobuf:"bytes,2,opt,name=Ops,json=ops,proto3" json:"Ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerRateLimiter) Reset()      { *m = FirecrackerRateLimiter{} }
func (*FirecrackerRateLimiter) ProtoMessage() {}
func (*FirecrackerRateLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}
func (m *FirecrackerRateLimiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirecrackerRateLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirecrackerRateLimiter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirecrackerRateLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerRateLimiter.Merge(m, src)
}
func (m *FirecrackerRateLimiter) XXX_Size() int {
	return m.Size()
}
func (m *FirecrackerRateLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerRateLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerRateLimiter proto.InternalMessageInfo

// Message to specify a token buicket used to rate limit disk and network IO for a Firecracker VM
type FirecrackerTokenBucket struct {
	OneTimeBurst         int64    `protobuf:"varint,1,opt,name=OneTimeBurst,json=oneTimeBurst,proto3" json:"OneTimeBurst,omitempty"`
	RefillTime           int64    `protobuf:"varint,2,opt,name=RefillTime,json=refillTime,proto3" json:"RefillTime,omitempty"`
	Capacity             int64    `protobuf:"varint,3,opt,name=Capacity,json=capacity,proto3" json:"Capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerTokenBucket) Reset()      { *m = FirecrackerTokenBucket{} }
func (*FirecrackerTokenBucket) ProtoMessage() {}
func (*FirecrackerTokenBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}
func (m *FirecrackerTokenBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirecrackerTokenBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirecrackerTokenBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirecrackerTokenBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerTokenBucket.Merge(m, src)
}
func (m *FirecrackerTokenBucket) XXX_Size() int {
	return m.Size()
}
func (m *FirecrackerTokenBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerTokenBucket.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerTokenBucket proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExtraData)(nil), "ExtraData")
	proto.RegisterType((*FirecrackerConfig)(nil), "FirecrackerConfig")
	proto.RegisterType((*FirecrackerNetworkInterface)(nil), "FirecrackerNetworkInterface")
	proto.RegisterType((*FirecrackerMachineConfiguration)(nil), "FirecrackerMachineConfiguration")
	proto.RegisterType((*FirecrackerDrive)(nil), "FirecrackerDrive")
	proto.RegisterType((*FirecrackerRateLimiter)(nil), "FirecrackerRateLimiter")
	proto.RegisterType((*FirecrackerTokenBucket)(nil), "FirecrackerTokenBucket")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0xc7, 0xa3, 0xaa, 0x49, 0x2d, 0xca, 0xf9, 0xb0, 0x50, 0xb4, 0x6e, 0x1a, 0x38, 0x86, 0x4f,
	0xee, 0xc5, 0x01, 0x5c, 0xb4, 0x40, 0x0f, 0x41, 0xeb, 0x8f, 0x14, 0x71, 0x5a, 0xc7, 0x06, 0x9d,
	0xf6, 0xd0, 0x1b, 0x2d, 0x8d, 0x6d, 0xd6, 0x12, 0x29, 0x50, 0x94, 0x13, 0xe7, 0xd4, 0x77, 0xe8,
	0x03, 0xf4, 0x49, 0x7a, 0xcf, 0xa5, 0x40, 0x8f, 0x7b, 0xdc, 0xf8, 0x3d, 0x16, 0x58, 0x90, 0x96,
	0x14, 0xd9, 0xc8, 0x66, 0x77, 0x4f, 0x02, 0x7f, 0xff, 0x99, 0xe1, 0xcc, 0x9f, 0x14, 0x91, 0x2d,
	0x97, 0x21, 0x44, 0x8d, 0x50, 0x70, 0xc9, 0x8f, 0xbf, 0x9a, 0x72, 0x3e, 0xf5, 0xe1, 0x4c, 0xaf,
	0xc6, 0xf1, 0xe4, 0x8c, 0xb0, 0xe5, 0x5a, 0xaa, 0xfd, 0x6b, 0x20, 0xeb, 0xe2, 0x4e, 0x0a, 0xd2,
	0x25, 0x92, 0x38, 0xc7, 0xa8, 0x70, 0x15, 0x71, 0x36, 0x0a, 0xc1, 0x2d, 0x1b, 0x55, 0xa3, 0x5e,
	0xc4, 0x85, 0x3f, 0x93, 0xb5, 0xf3, 0x3d, 0xb2, 0x71, 0xcc, 0xdc, 0x41, 0x28, 0x29, 0x67, 0x51,
	0xf9, 0x93, 0xaa, 0x51, 0xb7, 0x9b, 0x9f, 0x37, 0xd6, 0xa5, 0x1b, 0x69, 0xe9, 0x46, 0x8b, 0x2d,
	0xb1, 0x2d, 0x9e, 0x02, 0x9d, 0x13, 0x64, 0x8d, 0xa4, 0x47, 0xd9, 0x90, 0x0b, 0x59, 0x36, 0xab,
	0x46, 0x7d, 0x1f, 0x5b, 0x51, 0x0a, 0x9c, 0x0a, 0x42, 0x23, 0xe9, 0xf1, 0x58, 0x6a, 0xf9, 0x53,
	0x2d, 0xa3, 0x28, 0x23, 0x89, 0x0e, 0x42, 0x68, 0x7d, 0x37, 0xd3, 0x13, 0x52, 0xfb, 0xdb, 0x44,
	0xa5, 0x9f, 0xa9, 0x00, 0x57, 0x10, 0x77, 0x0e, 0xa2, 0xc3, 0xd9, 0x84, 0x4e, 0xb7, 0x7b, 0x35,
	0x3e, 0xb4, 0xd7, 0x2b, 0x54, 0xba, 0x06, 0x79, 0xcb, 0xc5, 0xbc, 0xc7, 0x24, 0x88, 0x09, 0x71,
	0x41, 0x4d, 0x6a, 0xd6, 0xed, 0xe6, 0x49, 0x23, 0xb7, 0xcd, 0x76, 0x10, 0x2e, 0xb1, 0xed, 0x34,
	0xa7, 0x8e, 0x0e, 0x7f, 0x01, 0xc1, 0xc0, 0xef, 0x05, 0x64, 0x0a, 0x43, 0x22, 0x67, 0x7a, 0x7a,
	0x0b, 0x1f, 0xce, 0x37, 0xb1, 0x9a, 0x71, 0x1d, 0xd9, 0x12, 0xd3, 0x48, 0x7b, 0x60, 0x61, 0x34,
	0xcf, 0x88, 0xf3, 0x13, 0x42, 0x7d, 0xe2, 0xce, 0x28, 0x83, 0xce, 0x64, 0xaa, 0x3d, 0xb0, 0x9b,
	0xd5, 0x7c, 0x3b, 0xa9, 0xaa, 0x87, 0x8f, 0x05, 0x51, 0xc3, 0x60, 0x14, 0x64, 0x39, 0xce, 0x19,
	0xb2, 0x30, 0xe7, 0xb2, 0x2b, 0xe8, 0x02, 0xca, 0x7b, 0xba, 0x40, 0x29, 0x5f, 0x40, 0x0b, 0xd8,
	0x12, 0x69, 0x8c, 0x73, 0x8e, 0x8e, 0x5a, 0x9e, 0x47, 0x55, 0x21, 0xe2, 0x6b, 0x14, 0x95, 0x3f,
	0xd3, 0x3e, 0x3c, 0x93, 0x77, 0x44, 0xb6, 0x42, 0x6b, 0x6f, 0x0c, 0xf4, 0xf5, 0x0b, 0x76, 0xa9,
	0x89, 0xfb, 0xc4, 0x6d, 0x79, 0x9e, 0x80, 0x68, 0x7d, 0x3c, 0x96, 0xee, 0x37, 0x21, 0x4e, 0x15,
	0xd9, 0x97, 0x3c, 0x92, 0x5d, 0x58, 0x5c, 0x93, 0x00, 0xf4, 0x5d, 0xb3, 0xb0, 0x3d, 0x7b, 0x42,
	0xea, 0x56, 0xb5, 0x7c, 0x9f, 0xdf, 0xf6, 0xfb, 0xdd, 0x91, 0xf6, 0xb5, 0x80, 0x2d, 0x92, 0x02,
	0xe7, 0x1c, 0xed, 0xf7, 0x18, 0x26, 0x12, 0x7e, 0xa5, 0x01, 0x95, 0x20, 0xb4, 0xa9, 0x76, 0xf3,
	0xcb, 0x7c, 0xef, 0x39, 0x19, 0xef, 0xd3, 0x7c, 0xb4, 0xf3, 0x23, 0x3a, 0x18, 0xc4, 0x32, 0x9f,
	0xbf, 0xfb, 0x72, 0xfe, 0x01, 0xdf, 0x08, 0xaf, 0xfd, 0x63, 0xa0, 0xd3, 0xf7, 0x9c, 0x8f, 0x9a,
	0xb1, 0x33, 0xfc, 0xed, 0x06, 0x82, 0xd0, 0x27, 0x12, 0x12, 0x13, 0x6c, 0xf7, 0x09, 0xa9, 0x19,
	0x2f, 0xe5, 0x05, 0x23, 0x63, 0x1f, 0x3c, 0xed, 0x41, 0x01, 0x5b, 0xb3, 0x14, 0x68, 0x0f, 0x21,
	0x18, 0xd1, 0x7b, 0xe8, 0xd3, 0x71, 0xf2, 0x63, 0xa1, 0x20, 0x23, 0x2a, 0xfb, 0x77, 0x37, 0x8c,
	0x3b, 0x3c, 0x66, 0xe9, 0x8f, 0x65, 0x2d, 0x52, 0x50, 0xfb, 0xcf, 0x40, 0x47, 0xdb, 0x07, 0xa9,
	0x4a, 0xf6, 0x22, 0x0c, 0xc4, 0x1b, 0x30, 0x7f, 0xa9, 0x3b, 0x2a, 0x60, 0x44, 0x33, 0xe2, 0xd4,
	0x50, 0xb1, 0x17, 0xe9, 0x8b, 0x04, 0x0b, 0xea, 0x42, 0xd2, 0x53, 0x91, 0xe6, 0x98, 0x7a, 0x42,
	0x86, 0x44, 0xc8, 0x38, 0xa6, 0x5e, 0x72, 0xdf, 0x0b, 0x61, 0xb2, 0x56, 0xf5, 0xd5, 0x85, 0x1f,
	0x30, 0x75, 0xb8, 0xe9, 0x45, 0x0f, 0x33, 0xe2, 0xfc, 0x80, 0xec, 0x8f, 0x30, 0xdd, 0x16, 0x39,
	0xc7, 0xef, 0xd1, 0x17, 0xcf, 0x87, 0x39, 0xdf, 0x21, 0xab, 0x4d, 0x98, 0x77, 0x4b, 0x3d, 0x39,
	0x4b, 0x5e, 0x82, 0x8d, 0x92, 0x37, 0x7c, 0x0e, 0xac, 0x1d, 0xbb, 0x73, 0x90, 0xd8, 0x1a, 0xa7,
	0x91, 0xce, 0x37, 0xc8, 0x1c, 0x84, 0xe9, 0x33, 0xf7, 0xce, 0x04, 0x93, 0x87, 0x51, 0xed, 0x6e,
	0x63, 0xef, 0x9c, 0xac, 0x0c, 0x1b, 0x30, 0xb8, 0xa1, 0x01, 0xb4, 0x63, 0x11, 0x49, 0xbd, 0xbd,
	0x89, 0x8b, 0x3c, 0xc7, 0x94, 0x29, 0x18, 0x26, 0xd4, 0xf7, 0x15, 0xd2, 0xfb, 0x99, 0x18, 0x89,
	0x8c, 0x28, 0x43, 0x3b, 0x24, 0x24, 0x2e, 0x95, 0x4b, 0x6d, 0xa8, 0x89, 0x0b, 0x6e, 0xb2, 0x6e,
	0x9f, 0x3e, 0x3c, 0x56, 0x76, 0x5e, 0x3d, 0x56, 0x76, 0xfe, 0x5a, 0x55, 0x8c, 0x87, 0x55, 0xc5,
	0xf8, 0x7f, 0x55, 0x31, 0x5e, 0xaf, 0x2a, 0xc6, 0x1f, 0xbb, 0xeb, 0x47, 0x6e, 0x4f, 0x7f, 0xbe,
	0x7d, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x23, 0xb3, 0xad, 0x0f, 0x06, 0x00, 0x00,
}

func (m *ExtraData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JsonSpec) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JsonSpec)))
		i += copy(dAtA[i:], m.JsonSpec)
	}
	if m.RuncOptions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuncOptions.Size()))
		n1, err1 := m.RuncOptions.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.StdinPort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StdinPort))
	}
	if m.StdoutPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StdoutPort))
	}
	if m.StderrPort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.StderrPort))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirecrackerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirecrackerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RuncOptions != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RuncOptions.Size()))
		n2, err2 := m.RuncOptions.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, msg := range m.NetworkInterfaces {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KernelImagePath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KernelImagePath)))
		i += copy(dAtA[i:], m.KernelImagePath)
	}
	if len(m.KernelArgs) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KernelArgs)))
		i += copy(dAtA[i:], m.KernelArgs)
	}
	if m.MachineCfg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MachineCfg.Size()))
		n3, err3 := m.MachineCfg.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.RootDrive != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RootDrive.Size()))
		n4, err4 := m.RootDrive.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if len(m.AdditionalDrives) > 0 {
		for _, msg := range m.AdditionalDrives {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirecrackerNetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirecrackerNetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.HostDevName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostDevName)))
		i += copy(dAtA[i:], m.HostDevName)
	}
	if m.AllowMMDS {
		dAtA[i] = 0x18
		i++
		if m.AllowMMDS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InRateLimiter != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.InRateLimiter.Size()))
		n5, err5 := m.InRateLimiter.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.OutRateLimiter != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OutRateLimiter.Size()))
		n6, err6 := m.OutRateLimiter.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirecrackerMachineConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirecrackerMachineConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CPUTemplate) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CPUTemplate)))
		i += copy(dAtA[i:], m.CPUTemplate)
	}
	if m.HtEnabled {
		dAtA[i] = 0x10
		i++
		if m.HtEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MemSizeMib != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.MemSizeMib))
	}
	if m.VcpuCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.VcpuCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirecrackerDrive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirecrackerDrive) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsReadOnly {
		dAtA[i] = 0x8
		i++
		if m.IsReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsRootDevice {
		dAtA[i] = 0x10
		i++
		if m.IsRootDevice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Partuuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Partuuid)))
		i += copy(dAtA[i:], m.Partuuid)
	}
	if len(m.PathOnHost) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PathOnHost)))
		i += copy(dAtA[i:], m.PathOnHost)
	}
	if m.RateLimiter != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RateLimiter.Size()))
		n7, err7 := m.RateLimiter.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirecrackerRateLimiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirecrackerRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bandwidth != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Bandwidth.Size()))
		n8, err8 := m.Bandwidth.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	if m.Ops != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Ops.Size()))
		n9, err9 := m.Ops.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirecrackerTokenBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirecrackerTokenBucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OneTimeBurst != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.OneTimeBurst))
	}
	if m.RefillTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.RefillTime))
	}
	if m.Capacity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Capacity))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExtraData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonSpec)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RuncOptions != nil {
		l = m.RuncOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StdinPort != 0 {
		n += 1 + sovTypes(uint64(m.StdinPort))
	}
	if m.StdoutPort != 0 {
		n += 1 + sovTypes(uint64(m.StdoutPort))
	}
	if m.StderrPort != 0 {
		n += 1 + sovTypes(uint64(m.StderrPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirecrackerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuncOptions != nil {
		l = m.RuncOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, e := range m.NetworkInterfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.KernelImagePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.KernelArgs)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MachineCfg != nil {
		l = m.MachineCfg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RootDrive != nil {
		l = m.RootDrive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AdditionalDrives) > 0 {
		for _, e := range m.AdditionalDrives {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirecrackerNetworkInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.HostDevName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowMMDS {
		n += 2
	}
	if m.InRateLimiter != nil {
		l = m.InRateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OutRateLimiter != nil {
		l = m.OutRateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirecrackerMachineConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CPUTemplate)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HtEnabled {
		n += 2
	}
	if m.MemSizeMib != 0 {
		n += 1 + sovTypes(uint64(m.MemSizeMib))
	}
	if m.VcpuCount != 0 {
		n += 1 + sovTypes(uint64(m.VcpuCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirecrackerDrive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReadOnly {
		n += 2
	}
	if m.IsRootDevice {
		n += 2
	}
	l = len(m.Partuuid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PathOnHost)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RateLimiter != nil {
		l = m.RateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirecrackerRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bandwidth != nil {
		l = m.Bandwidth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Ops != nil {
		l = m.Ops.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirecrackerTokenBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneTimeBurst != 0 {
		n += 1 + sovTypes(uint64(m.OneTimeBurst))
	}
	if m.RefillTime != 0 {
		n += 1 + sovTypes(uint64(m.RefillTime))
	}
	if m.Capacity != 0 {
		n += 1 + sovTypes(uint64(m.Capacity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExtraData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtraData{`,
		`JsonSpec:` + fmt.Sprintf("%v", this.JsonSpec) + `,`,
		`RuncOptions:` + strings.Replace(fmt.Sprintf("%v", this.RuncOptions), "Any", "types.Any", 1) + `,`,
		`StdinPort:` + fmt.Sprintf("%v", this.StdinPort) + `,`,
		`StdoutPort:` + fmt.Sprintf("%v", this.StdoutPort) + `,`,
		`StderrPort:` + fmt.Sprintf("%v", this.StderrPort) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirecrackerConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkInterfaces := "[]*FirecrackerNetworkInterface{"
	for _, f := range this.NetworkInterfaces {
		repeatedStringForNetworkInterfaces += strings.Replace(f.String(), "FirecrackerNetworkInterface", "FirecrackerNetworkInterface", 1) + ","
	}
	repeatedStringForNetworkInterfaces += "}"
	repeatedStringForAdditionalDrives := "[]*FirecrackerDrive{"
	for _, f := range this.AdditionalDrives {
		repeatedStringForAdditionalDrives += strings.Replace(f.String(), "FirecrackerDrive", "FirecrackerDrive", 1) + ","
	}
	repeatedStringForAdditionalDrives += "}"
	s := strings.Join([]string{`&FirecrackerConfig{`,
		`RuncOptions:` + strings.Replace(fmt.Sprintf("%v", this.RuncOptions), "Any", "types.Any", 1) + `,`,
		`NetworkInterfaces:` + repeatedStringForNetworkInterfaces + `,`,
		`KernelImagePath:` + fmt.Sprintf("%v", this.KernelImagePath) + `,`,
		`KernelArgs:` + fmt.Sprintf("%v", this.KernelArgs) + `,`,
		`MachineCfg:` + strings.Replace(this.MachineCfg.String(), "FirecrackerMachineConfiguration", "FirecrackerMachineConfiguration", 1) + `,`,
		`RootDrive:` + strings.Replace(this.RootDrive.String(), "FirecrackerDrive", "FirecrackerDrive", 1) + `,`,
		`AdditionalDrives:` + repeatedStringForAdditionalDrives + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirecrackerNetworkInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirecrackerNetworkInterface{`,
		`MacAddress:` + fmt.Sprintf("%v", this.MacAddress) + `,`,
		`HostDevName:` + fmt.Sprintf("%v", this.HostDevName) + `,`,
		`AllowMMDS:` + fmt.Sprintf("%v", this.AllowMMDS) + `,`,
		`InRateLimiter:` + strings.Replace(this.InRateLimiter.String(), "FirecrackerRateLimiter", "FirecrackerRateLimiter", 1) + `,`,
		`OutRateLimiter:` + strings.Replace(this.OutRateLimiter.String(), "FirecrackerRateLimiter", "FirecrackerRateLimiter", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirecrackerMachineConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirecrackerMachineConfiguration{`,
		`CPUTemplate:` + fmt.Sprintf("%v", this.CPUTemplate) + `,`,
		`HtEnabled:` + fmt.Sprintf("%v", this.HtEnabled) + `,`,
		`MemSizeMib:` + fmt.Sprintf("%v", this.MemSizeMib) + `,`,
		`VcpuCount:` + fmt.Sprintf("%v", this.VcpuCount) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirecrackerDrive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirecrackerDrive{`,
		`IsReadOnly:` + fmt.Sprintf("%v", this.IsReadOnly) + `,`,
		`IsRootDevice:` + fmt.Sprintf("%v", this.IsRootDevice) + `,`,
		`Partuuid:` + fmt.Sprintf("%v", this.Partuuid) + `,`,
		`PathOnHost:` + fmt.Sprintf("%v", this.PathOnHost) + `,`,
		`RateLimiter:` + strings.Replace(this.RateLimiter.String(), "FirecrackerRateLimiter", "FirecrackerRateLimiter", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirecrackerRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirecrackerRateLimiter{`,
		`Bandwidth:` + strings.Replace(this.Bandwidth.String(), "FirecrackerTokenBucket", "FirecrackerTokenBucket", 1) + `,`,
		`Ops:` + strings.Replace(this.Ops.String(), "FirecrackerTokenBucket", "FirecrackerTokenBucket", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirecrackerTokenBucket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirecrackerTokenBucket{`,
		`OneTimeBurst:` + fmt.Sprintf("%v", this.OneTimeBurst) + `,`,
		`RefillTime:` + fmt.Sprintf("%v", this.RefillTime) + `,`,
		`Capacity:` + fmt.Sprintf("%v", this.Capacity) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExtraData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonSpec", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonSpec = append(m.JsonSpec[:0], dAtA[iNdEx:postIndex]...)
			if m.JsonSpec == nil {
				m.JsonSpec = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuncOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuncOptions == nil {
				m.RuncOptions = &types.Any{}
			}
			if err := m.RuncOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdinPort", wireType)
			}
			m.StdinPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StdinPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdoutPort", wireType)
			}
			m.StdoutPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StdoutPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StderrPort", wireType)
			}
			m.StderrPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StderrPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirecrackerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirecrackerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirecrackerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuncOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuncOptions == nil {
				m.RuncOptions = &types.Any{}
			}
			if err := m.RuncOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterfaces = append(m.NetworkInterfaces, &FirecrackerNetworkInterface{})
			if err := m.NetworkInterfaces[len(m.NetworkInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineCfg == nil {
				m.MachineCfg = &FirecrackerMachineConfiguration{}
			}
			if err := m.MachineCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDrive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootDrive == nil {
				m.RootDrive = &FirecrackerDrive{}
			}
			if err := m.RootDrive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDrives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalDrives = append(m.AdditionalDrives, &FirecrackerDrive{})
			if err := m.AdditionalDrives[len(m.AdditionalDrives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirecrackerNetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirecrackerNetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirecrackerNetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostDevName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostDevName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMMDS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMMDS = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InRateLimiter == nil {
				m.InRateLimiter = &FirecrackerRateLimiter{}
			}
			if err := m.InRateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutRateLimiter == nil {
				m.OutRateLimiter = &FirecrackerRateLimiter{}
			}
			if err := m.OutRateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirecrackerMachineConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirecrackerMachineConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirecrackerMachineConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPUTemplate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HtEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemSizeMib", wireType)
			}
			m.MemSizeMib = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemSizeMib |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcpuCount", wireType)
			}
			m.VcpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VcpuCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirecrackerDrive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirecrackerDrive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirecrackerDrive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReadOnly = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRootDevice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRootDevice = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partuuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partuuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathOnHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathOnHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimiter == nil {
				m.RateLimiter = &FirecrackerRateLimiter{}
			}
			if err := m.RateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirecrackerRateLimiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirecrackerRateLimiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirecrackerRateLimiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bandwidth == nil {
				m.Bandwidth = &FirecrackerTokenBucket{}
			}
			if err := m.Bandwidth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ops == nil {
				m.Ops = &FirecrackerTokenBucket{}
			}
			if err := m.Ops.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirecrackerTokenBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirecrackerTokenBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirecrackerTokenBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTimeBurst", wireType)
			}
			m.OneTimeBurst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OneTimeBurst |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefillTime", wireType)
			}
			m.RefillTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefillTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
