// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firecracker.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	protobuf "google/protobuf"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CreateVMRequest specifies creation parameters for a new FC instance
type CreateVMRequest struct {
	// Specifies the machine configuration for the VM
	MachineCfg *FirecrackerMachineConfiguration `protobuf:"bytes,1,opt,name=MachineCfg,proto3" json:"MachineCfg,omitempty"`
	// Specifies the file path where the kernel image is located
	KernelImagePath string `protobuf:"bytes,2,opt,name=KernelImagePath,proto3" json:"KernelImagePath,omitempty"`
	// Specifies the commandline arguments that should be passed to the kernel
	KernelArgs string `protobuf:"bytes,3,opt,name=KernelArgs,proto3" json:"KernelArgs,omitempty"`
	// Specifies the root block device for the VM
	RootDrive *FirecrackerDrive `protobuf:"bytes,4,opt,name=RootDrive,proto3" json:"RootDrive,omitempty"`
	// Specifies the additional block device config for the VM.
	AdditionalDrives []*FirecrackerDrive `protobuf:"bytes,5,rep,name=AdditionalDrives,proto3" json:"AdditionalDrives,omitempty"`
	// Specifies the networking configuration for a VM
	NetworkInterfaces []*FirecrackerNetworkInterface `protobuf:"bytes,6,rep,name=NetworkInterfaces,proto3" json:"NetworkInterfaces,omitempty"`
	// The number of dummy drives to reserve in advance before running FC instance.
	ContainerCount       int32    `protobuf:"varint,7,opt,name=ContainerCount,proto3" json:"ContainerCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVMRequest) Reset()         { *m = CreateVMRequest{} }
func (m *CreateVMRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVMRequest) ProtoMessage()    {}
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{0}
}
func (m *CreateVMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVMRequest.Merge(m, src)
}
func (m *CreateVMRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVMRequest proto.InternalMessageInfo

func (m *CreateVMRequest) GetMachineCfg() *FirecrackerMachineConfiguration {
	if m != nil {
		return m.MachineCfg
	}
	return nil
}

func (m *CreateVMRequest) GetKernelImagePath() string {
	if m != nil {
		return m.KernelImagePath
	}
	return ""
}

func (m *CreateVMRequest) GetKernelArgs() string {
	if m != nil {
		return m.KernelArgs
	}
	return ""
}

func (m *CreateVMRequest) GetRootDrive() *FirecrackerDrive {
	if m != nil {
		return m.RootDrive
	}
	return nil
}

func (m *CreateVMRequest) GetAdditionalDrives() []*FirecrackerDrive {
	if m != nil {
		return m.AdditionalDrives
	}
	return nil
}

func (m *CreateVMRequest) GetNetworkInterfaces() []*FirecrackerNetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *CreateVMRequest) GetContainerCount() int32 {
	if m != nil {
		return m.ContainerCount
	}
	return 0
}

type CreateVMResponse struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVMResponse) Reset()         { *m = CreateVMResponse{} }
func (m *CreateVMResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVMResponse) ProtoMessage()    {}
func (*CreateVMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{1}
}
func (m *CreateVMResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVMResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVMResponse.Merge(m, src)
}
func (m *CreateVMResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateVMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVMResponse proto.InternalMessageInfo

func (m *CreateVMResponse) GetVMID() string {
	if m != nil {
		return m.VMID
	}
	return ""
}

type StopVMRequest struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopVMRequest) Reset()         { *m = StopVMRequest{} }
func (m *StopVMRequest) String() string { return proto.CompactTextString(m) }
func (*StopVMRequest) ProtoMessage()    {}
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{2}
}
func (m *StopVMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopVMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopVMRequest.Merge(m, src)
}
func (m *StopVMRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopVMRequest proto.InternalMessageInfo

func (m *StopVMRequest) GetVMID() string {
	if m != nil {
		return m.VMID
	}
	return ""
}

type GetVMAddressRequest struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVMAddressRequest) Reset()         { *m = GetVMAddressRequest{} }
func (m *GetVMAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GetVMAddressRequest) ProtoMessage()    {}
func (*GetVMAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{3}
}
func (m *GetVMAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVMAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVMAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVMAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVMAddressRequest.Merge(m, src)
}
func (m *GetVMAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetVMAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVMAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVMAddressRequest proto.InternalMessageInfo

func (m *GetVMAddressRequest) GetVMID() string {
	if m != nil {
		return m.VMID
	}
	return ""
}

type GetVMAddressResponse struct {
	SocketPath           string   `protobuf:"bytes,1,opt,name=SocketPath,proto3" json:"SocketPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVMAddressResponse) Reset()         { *m = GetVMAddressResponse{} }
func (m *GetVMAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GetVMAddressResponse) ProtoMessage()    {}
func (*GetVMAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{4}
}
func (m *GetVMAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVMAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVMAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVMAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVMAddressResponse.Merge(m, src)
}
func (m *GetVMAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVMAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVMAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVMAddressResponse proto.InternalMessageInfo

func (m *GetVMAddressResponse) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateVMRequest)(nil), "CreateVMRequest")
	proto.RegisterType((*CreateVMResponse)(nil), "CreateVMResponse")
	proto.RegisterType((*StopVMRequest)(nil), "StopVMRequest")
	proto.RegisterType((*GetVMAddressRequest)(nil), "GetVMAddressRequest")
	proto.RegisterType((*GetVMAddressResponse)(nil), "GetVMAddressResponse")
}

func init() { proto.RegisterFile("firecracker.proto", fileDescriptor_a73317e9fb8da571) }

var fileDescriptor_a73317e9fb8da571 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0xc5, 0x74, 0x2d, 0xf4, 0x16, 0xb6, 0xd6, 0x0c, 0x88, 0x0a, 0x8a, 0xa2, 0x22, 0x4d, 0xe5,
	0xc5, 0x45, 0x43, 0xe2, 0x05, 0x21, 0x51, 0x3a, 0x40, 0x05, 0x15, 0x21, 0x4f, 0xea, 0x03, 0x6f,
	0x26, 0xbd, 0xc9, 0xa2, 0x76, 0x76, 0xb0, 0x1d, 0xd0, 0x1e, 0xf9, 0x0b, 0x7e, 0x82, 0xff, 0xe0,
	0x91, 0x4f, 0x40, 0xe5, 0x47, 0xd0, 0x9c, 0x55, 0x49, 0xd3, 0x88, 0xa7, 0xc4, 0xe7, 0x9e, 0x63,
	0x9f, 0x73, 0xef, 0x85, 0x5e, 0x94, 0x68, 0x0c, 0xb5, 0x08, 0x97, 0xa8, 0x59, 0xaa, 0x95, 0x55,
	0xfd, 0x07, 0xb1, 0x52, 0xf1, 0x0a, 0x47, 0xee, 0xf4, 0x39, 0x8b, 0x46, 0x78, 0x9e, 0xda, 0x8b,
	0xab, 0x62, 0xc7, 0x5e, 0xa4, 0x68, 0xf2, 0xc3, 0xe0, 0x7b, 0x03, 0x0e, 0x26, 0x1a, 0x85, 0xc5,
	0xf9, 0x8c, 0xe3, 0x97, 0x0c, 0x8d, 0xa5, 0x2f, 0x01, 0x66, 0x22, 0x3c, 0x4b, 0x24, 0x4e, 0xa2,
	0xd8, 0x23, 0x01, 0x19, 0x76, 0x8e, 0x03, 0xf6, 0xa6, 0x78, 0x65, 0x53, 0x55, 0x32, 0x4a, 0xe2,
	0x4c, 0x0b, 0x9b, 0x28, 0xc9, 0x4b, 0x1a, 0x3a, 0x84, 0x83, 0xf7, 0xa8, 0x25, 0xae, 0xa6, 0xe7,
	0x22, 0xc6, 0x8f, 0xc2, 0x9e, 0x79, 0xd7, 0x03, 0x32, 0x6c, 0xf3, 0x2a, 0x4c, 0x7d, 0x80, 0x1c,
	0x1a, 0xeb, 0xd8, 0x78, 0x0d, 0x47, 0x2a, 0x21, 0x74, 0x04, 0x6d, 0xae, 0x94, 0x3d, 0xd1, 0xc9,
	0x57, 0xf4, 0xf6, 0x9c, 0x95, 0x5e, 0xd9, 0x8a, 0x2b, 0xf0, 0x82, 0x43, 0x5f, 0x40, 0x77, 0xbc,
	0x58, 0x24, 0x97, 0x96, 0xc4, 0xca, 0x41, 0xc6, 0x6b, 0x06, 0x8d, 0x7a, 0xdd, 0x0e, 0x95, 0xbe,
	0x83, 0xde, 0x07, 0xb4, 0xdf, 0x94, 0x5e, 0x4e, 0xa5, 0x45, 0x1d, 0x89, 0x10, 0x8d, 0xd7, 0x72,
	0xfa, 0x87, 0x65, 0x7d, 0x95, 0xc4, 0x77, 0x65, 0xf4, 0x08, 0xf6, 0x27, 0x4a, 0x5a, 0x91, 0x48,
	0xd4, 0x13, 0x95, 0x49, 0xeb, 0xdd, 0x08, 0xc8, 0xb0, 0xc9, 0x2b, 0xe8, 0xe0, 0x08, 0xba, 0xc5,
	0x08, 0x4c, 0xaa, 0xa4, 0x41, 0x4a, 0x61, 0x6f, 0x3e, 0x9b, 0x9e, 0xb8, 0xee, 0xb7, 0xb9, 0xfb,
	0x1f, 0x3c, 0x82, 0xdb, 0xa7, 0x56, 0xa5, 0xc5, 0xa0, 0xea, 0x48, 0x8f, 0xe1, 0xce, 0x5b, 0xb4,
	0xf3, 0xd9, 0x78, 0xb1, 0xd0, 0x68, 0xcc, 0xff, 0xa8, 0xcf, 0xe0, 0x70, 0x9b, 0x7a, 0xf5, 0xb6,
	0x0f, 0x70, 0xaa, 0xc2, 0x25, 0x5a, 0x37, 0xb8, 0x5c, 0x51, 0x42, 0x8e, 0x7f, 0x12, 0xe8, 0x94,
	0x5a, 0x41, 0x47, 0x70, 0x73, 0xe3, 0x9f, 0x76, 0x59, 0x65, 0x9b, 0xfa, 0x3d, 0xb6, 0x13, 0xee,
	0x09, 0xb4, 0xf2, 0x20, 0x74, 0x9f, 0x6d, 0x25, 0xea, 0xdf, 0x63, 0xf9, 0xe6, 0xb2, 0xcd, 0xe6,
	0xb2, 0xd7, 0x97, 0x9b, 0x4b, 0x9f, 0xc3, 0xad, 0xb2, 0x55, 0x7a, 0xc8, 0x6a, 0x42, 0xf6, 0xef,
	0xb2, 0xba, 0x3c, 0xaf, 0xee, 0xff, 0x5a, 0xfb, 0xe4, 0xf7, 0xda, 0x27, 0x7f, 0xd6, 0x3e, 0xf9,
	0xf1, 0xd7, 0xbf, 0xf6, 0xa9, 0x99, 0x5f, 0xdf, 0x72, 0x9f, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x06, 0xff, 0x8d, 0x55, 0x42, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FirecrackerClient is the client API for Firecracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FirecrackerClient interface {
	// Runs new Firecracker VM instance
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error)
	// Stops existing Firecracker instance by VM ID
	StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	// Gets VM instance socket file location
	GetVMAddress(ctx context.Context, in *GetVMAddressRequest, opts ...grpc.CallOption) (*GetVMAddressResponse, error)
}

type firecrackerClient struct {
	cc *grpc.ClientConn
}

func NewFirecrackerClient(cc *grpc.ClientConn) FirecrackerClient {
	return &firecrackerClient{cc}
}

func (c *firecrackerClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error) {
	out := new(CreateVMResponse)
	err := c.cc.Invoke(ctx, "/Firecracker/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firecrackerClient) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/Firecracker/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firecrackerClient) GetVMAddress(ctx context.Context, in *GetVMAddressRequest, opts ...grpc.CallOption) (*GetVMAddressResponse, error) {
	out := new(GetVMAddressResponse)
	err := c.cc.Invoke(ctx, "/Firecracker/GetVMAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirecrackerServer is the server API for Firecracker service.
type FirecrackerServer interface {
	// Runs new Firecracker VM instance
	CreateVM(context.Context, *CreateVMRequest) (*CreateVMResponse, error)
	// Stops existing Firecracker instance by VM ID
	StopVM(context.Context, *StopVMRequest) (*protobuf.Empty, error)
	// Gets VM instance socket file location
	GetVMAddress(context.Context, *GetVMAddressRequest) (*GetVMAddressResponse, error)
}

func RegisterFirecrackerServer(s *grpc.Server, srv FirecrackerServer) {
	s.RegisterService(&_Firecracker_serviceDesc, srv)
}

func _Firecracker_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firecracker_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).StopVM(ctx, req.(*StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firecracker_GetVMAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).GetVMAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/GetVMAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).GetVMAddress(ctx, req.(*GetVMAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Firecracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Firecracker",
	HandlerType: (*FirecrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _Firecracker_CreateVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _Firecracker_StopVM_Handler,
		},
		{
			MethodName: "GetVMAddress",
			Handler:    _Firecracker_GetVMAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firecracker.proto",
}

func (m *CreateVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MachineCfg != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.MachineCfg.Size()))
		n1, err := m.MachineCfg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.KernelImagePath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.KernelImagePath)))
		i += copy(dAtA[i:], m.KernelImagePath)
	}
	if len(m.KernelArgs) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.KernelArgs)))
		i += copy(dAtA[i:], m.KernelArgs)
	}
	if m.RootDrive != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.RootDrive.Size()))
		n2, err := m.RootDrive.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.AdditionalDrives) > 0 {
		for _, msg := range m.AdditionalDrives {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFirecracker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, msg := range m.NetworkInterfaces {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFirecracker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ContainerCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.ContainerCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVMResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StopVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVMAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVMAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVMAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVMAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SocketPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.SocketPath)))
		i += copy(dAtA[i:], m.SocketPath)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFirecracker(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateVMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MachineCfg != nil {
		l = m.MachineCfg.Size()
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.KernelImagePath)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.KernelArgs)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.RootDrive != nil {
		l = m.RootDrive.Size()
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if len(m.AdditionalDrives) > 0 {
		for _, e := range m.AdditionalDrives {
			l = e.Size()
			n += 1 + l + sovFirecracker(uint64(l))
		}
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, e := range m.NetworkInterfaces {
			l = e.Size()
			n += 1 + l + sovFirecracker(uint64(l))
		}
	}
	if m.ContainerCount != 0 {
		n += 1 + sovFirecracker(uint64(m.ContainerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateVMResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopVMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVMAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVMAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SocketPath)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFirecracker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFirecracker(x uint64) (n int) {
	return sovFirecracker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineCfg == nil {
				m.MachineCfg = &FirecrackerMachineConfiguration{}
			}
			if err := m.MachineCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDrive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootDrive == nil {
				m.RootDrive = &FirecrackerDrive{}
			}
			if err := m.RootDrive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDrives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalDrives = append(m.AdditionalDrives, &FirecrackerDrive{})
			if err := m.AdditionalDrives[len(m.AdditionalDrives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterfaces = append(m.NetworkInterfaces, &FirecrackerNetworkInterface{})
			if err := m.NetworkInterfaces[len(m.NetworkInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerCount", wireType)
			}
			m.ContainerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVMAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVMAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVMAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVMAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVMAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVMAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFirecracker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFirecracker
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFirecracker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFirecracker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFirecracker(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFirecracker
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFirecracker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFirecracker   = fmt.Errorf("proto: integer overflow")
)
