// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fccontrol.proto

package fccontrol

import (
	context "context"
	fmt "fmt"
	proto1 "github.com/firecracker-microvm/firecracker-containerd/proto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("fccontrol.proto", fileDescriptor_b99f53e2bf82c5ef) }

var fileDescriptor_b99f53e2bf82c5ef = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4b, 0x4e, 0xce,
	0xcf, 0x2b, 0x29, 0xca, 0xcf, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x4e, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0xa1,
	0x92, 0x82, 0x69, 0x99, 0x45, 0xa9, 0xc9, 0x45, 0x89, 0xc9, 0xd9, 0xa9, 0x45, 0x10, 0x21, 0xa3,
	0x97, 0x8c, 0x5c, 0xdc, 0x6e, 0x08, 0x51, 0x21, 0x13, 0x2e, 0x0e, 0xe7, 0xa2, 0xd4, 0xc4, 0x92,
	0xd4, 0x30, 0x5f, 0x21, 0x01, 0x3d, 0x18, 0x33, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x4a,
	0x4c, 0x0f, 0x62, 0xbc, 0x1e, 0xcc, 0x78, 0x3d, 0x57, 0x90, 0xf1, 0x42, 0x06, 0x5c, 0x6c, 0xc1,
	0x25, 0xf9, 0x05, 0x61, 0xbe, 0x42, 0x7c, 0x7a, 0x10, 0x06, 0x21, 0x1d, 0x46, 0x5c, 0x9c, 0xee,
	0xa9, 0x25, 0x61, 0xbe, 0x9e, 0x79, 0x69, 0xf9, 0x42, 0x82, 0x7a, 0x70, 0x36, 0x4c, 0x9f, 0x10,
	0xb2, 0x50, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x1d, 0x17, 0x6f, 0x30, 0x48, 0xd0, 0x37,
	0xb5, 0x24, 0x31, 0x25, 0xb1, 0x24, 0x51, 0x48, 0x54, 0x0f, 0x85, 0x4f, 0xc0, 0x4e, 0x27, 0xee,
	0x28, 0x4e, 0x78, 0x70, 0x25, 0xb1, 0x81, 0x25, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90,
	0xa1, 0xa0, 0x2a, 0x42, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FirecrackerClient is the client API for Firecracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FirecrackerClient interface {
	// Runs new Firecracker VM instance
	CreateVM(ctx context.Context, in *proto1.CreateVMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stops existing Firecracker instance by VM ID
	StopVM(ctx context.Context, in *proto1.StopVMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns VM info by VM ID
	GetVMInfo(ctx context.Context, in *proto1.GetVMInfoRequest, opts ...grpc.CallOption) (*proto1.GetVMInfoResponse, error)
	// Sets VM's instance metadata
	SetVMMetadata(ctx context.Context, in *proto1.SetVMMetadataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type firecrackerClient struct {
	cc *grpc.ClientConn
}

func NewFirecrackerClient(cc *grpc.ClientConn) FirecrackerClient {
	return &firecrackerClient{cc}
}

func (c *firecrackerClient) CreateVM(ctx context.Context, in *proto1.CreateVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Firecracker/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firecrackerClient) StopVM(ctx context.Context, in *proto1.StopVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Firecracker/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firecrackerClient) GetVMInfo(ctx context.Context, in *proto1.GetVMInfoRequest, opts ...grpc.CallOption) (*proto1.GetVMInfoResponse, error) {
	out := new(proto1.GetVMInfoResponse)
	err := c.cc.Invoke(ctx, "/Firecracker/GetVMInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firecrackerClient) SetVMMetadata(ctx context.Context, in *proto1.SetVMMetadataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Firecracker/SetVMMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirecrackerServer is the server API for Firecracker service.
type FirecrackerServer interface {
	// Runs new Firecracker VM instance
	CreateVM(context.Context, *proto1.CreateVMRequest) (*empty.Empty, error)
	// Stops existing Firecracker instance by VM ID
	StopVM(context.Context, *proto1.StopVMRequest) (*empty.Empty, error)
	// Returns VM info by VM ID
	GetVMInfo(context.Context, *proto1.GetVMInfoRequest) (*proto1.GetVMInfoResponse, error)
	// Sets VM's instance metadata
	SetVMMetadata(context.Context, *proto1.SetVMMetadataRequest) (*empty.Empty, error)
}

func RegisterFirecrackerServer(s *grpc.Server, srv FirecrackerServer) {
	s.RegisterService(&_Firecracker_serviceDesc, srv)
}

func _Firecracker_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).CreateVM(ctx, req.(*proto1.CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firecracker_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).StopVM(ctx, req.(*proto1.StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firecracker_GetVMInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.GetVMInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).GetVMInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/GetVMInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).GetVMInfo(ctx, req.(*proto1.GetVMInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firecracker_SetVMMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.SetVMMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirecrackerServer).SetVMMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Firecracker/SetVMMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirecrackerServer).SetVMMetadata(ctx, req.(*proto1.SetVMMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Firecracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Firecracker",
	HandlerType: (*FirecrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _Firecracker_CreateVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _Firecracker_StopVM_Handler,
		},
		{
			MethodName: "GetVMInfo",
			Handler:    _Firecracker_GetVMInfo_Handler,
		},
		{
			MethodName: "SetVMMetadata",
			Handler:    _Firecracker_SetVMMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fccontrol.proto",
}
