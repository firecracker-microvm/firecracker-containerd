// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Message to store bundle/config.json bytes
type ExtraData struct {
	JsonSpec             []byte     `protobuf:"bytes,1,opt,name=JsonSpec,json=jsonSpec,proto3" json:"JsonSpec,omitempty"`
	RuncOptions          *types.Any `protobuf:"bytes,2,opt,name=RuncOptions,json=runcOptions,proto3" json:"RuncOptions,omitempty"`
	StdinPort            uint32     `protobuf:"varint,3,opt,name=StdinPort,json=stdinPort,proto3" json:"StdinPort,omitempty"`
	StdoutPort           uint32     `protobuf:"varint,4,opt,name=StdoutPort,json=stdoutPort,proto3" json:"StdoutPort,omitempty"`
	StderrPort           uint32     `protobuf:"varint,5,opt,name=StderrPort,json=stderrPort,proto3" json:"StderrPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExtraData) Reset()         { *m = ExtraData{} }
func (m *ExtraData) String() string { return proto.CompactTextString(m) }
func (*ExtraData) ProtoMessage()    {}
func (*ExtraData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *ExtraData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtraData.Unmarshal(m, b)
}
func (m *ExtraData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtraData.Marshal(b, m, deterministic)
}
func (m *ExtraData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraData.Merge(m, src)
}
func (m *ExtraData) XXX_Size() int {
	return xxx_messageInfo_ExtraData.Size(m)
}
func (m *ExtraData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraData proto.InternalMessageInfo

func (m *ExtraData) GetJsonSpec() []byte {
	if m != nil {
		return m.JsonSpec
	}
	return nil
}

func (m *ExtraData) GetRuncOptions() *types.Any {
	if m != nil {
		return m.RuncOptions
	}
	return nil
}

func (m *ExtraData) GetStdinPort() uint32 {
	if m != nil {
		return m.StdinPort
	}
	return 0
}

func (m *ExtraData) GetStdoutPort() uint32 {
	if m != nil {
		return m.StdoutPort
	}
	return 0
}

func (m *ExtraData) GetStderrPort() uint32 {
	if m != nil {
		return m.StderrPort
	}
	return 0
}

// Message to specify the various Firecracker VM configurations for a task
type FirecrackerConfig struct {
	RuncOptions       *types.Any                       `protobuf:"bytes,1,opt,name=RuncOptions,json=runcOptions,proto3" json:"RuncOptions,omitempty"`
	NetworkInterfaces []*FirecrackerNetworkInterface   `protobuf:"bytes,2,rep,name=NetworkInterfaces,json=networkInterfaces,proto3" json:"NetworkInterfaces,omitempty"`
	KernelImagePath   string                           `protobuf:"bytes,3,opt,name=KernelImagePath,json=kernelImagePath,proto3" json:"KernelImagePath,omitempty"`
	KernelArgs        string                           `protobuf:"bytes,4,opt,name=KernelArgs,json=kernelArgs,proto3" json:"KernelArgs,omitempty"`
	MachineCfg        *FirecrackerMachineConfiguration `protobuf:"bytes,5,opt,name=MachineCfg,json=machineCfg,proto3" json:"MachineCfg,omitempty"`
	RootDrive         *FirecrackerDrive                `protobuf:"bytes,6,opt,name=RootDrive,json=rootDrive,proto3" json:"RootDrive,omitempty"`
	// Specifies the additional block device config for the VM. Note that
	// the snapshotter used might itself present block devices to the be
	// attached to the VM. This fields allows additional block devices to
	// that list.
	AdditionalDrives     []*FirecrackerDrive `protobuf:"bytes,7,rep,name=AdditionalDrives,json=additionalDrives,proto3" json:"AdditionalDrives,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FirecrackerConfig) Reset()         { *m = FirecrackerConfig{} }
func (m *FirecrackerConfig) String() string { return proto.CompactTextString(m) }
func (*FirecrackerConfig) ProtoMessage()    {}
func (*FirecrackerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *FirecrackerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerConfig.Unmarshal(m, b)
}
func (m *FirecrackerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerConfig.Marshal(b, m, deterministic)
}
func (m *FirecrackerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerConfig.Merge(m, src)
}
func (m *FirecrackerConfig) XXX_Size() int {
	return xxx_messageInfo_FirecrackerConfig.Size(m)
}
func (m *FirecrackerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerConfig proto.InternalMessageInfo

func (m *FirecrackerConfig) GetRuncOptions() *types.Any {
	if m != nil {
		return m.RuncOptions
	}
	return nil
}

func (m *FirecrackerConfig) GetNetworkInterfaces() []*FirecrackerNetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *FirecrackerConfig) GetKernelImagePath() string {
	if m != nil {
		return m.KernelImagePath
	}
	return ""
}

func (m *FirecrackerConfig) GetKernelArgs() string {
	if m != nil {
		return m.KernelArgs
	}
	return ""
}

func (m *FirecrackerConfig) GetMachineCfg() *FirecrackerMachineConfiguration {
	if m != nil {
		return m.MachineCfg
	}
	return nil
}

func (m *FirecrackerConfig) GetRootDrive() *FirecrackerDrive {
	if m != nil {
		return m.RootDrive
	}
	return nil
}

func (m *FirecrackerConfig) GetAdditionalDrives() []*FirecrackerDrive {
	if m != nil {
		return m.AdditionalDrives
	}
	return nil
}

// Message to specify network config for a Firecracker VM
type FirecrackerNetworkInterface struct {
	MacAddress           string                  `protobuf:"bytes,1,opt,name=MacAddress,json=macAddress,proto3" json:"MacAddress,omitempty"`
	HostDevName          string                  `protobuf:"bytes,2,opt,name=HostDevName,json=hostDevName,proto3" json:"HostDevName,omitempty"`
	AllowMMDS            bool                    `protobuf:"varint,3,opt,name=AllowMMDS,json=allowMMDS,proto3" json:"AllowMMDS,omitempty"`
	InRateLimiter        *FirecrackerRateLimiter `protobuf:"bytes,4,opt,name=InRateLimiter,json=inRateLimiter,proto3" json:"InRateLimiter,omitempty"`
	OutRateLimiter       *FirecrackerRateLimiter `protobuf:"bytes,5,opt,name=OutRateLimiter,json=outRateLimiter,proto3" json:"OutRateLimiter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerNetworkInterface) Reset()         { *m = FirecrackerNetworkInterface{} }
func (m *FirecrackerNetworkInterface) String() string { return proto.CompactTextString(m) }
func (*FirecrackerNetworkInterface) ProtoMessage()    {}
func (*FirecrackerNetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *FirecrackerNetworkInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerNetworkInterface.Unmarshal(m, b)
}
func (m *FirecrackerNetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerNetworkInterface.Marshal(b, m, deterministic)
}
func (m *FirecrackerNetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerNetworkInterface.Merge(m, src)
}
func (m *FirecrackerNetworkInterface) XXX_Size() int {
	return xxx_messageInfo_FirecrackerNetworkInterface.Size(m)
}
func (m *FirecrackerNetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerNetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerNetworkInterface proto.InternalMessageInfo

func (m *FirecrackerNetworkInterface) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *FirecrackerNetworkInterface) GetHostDevName() string {
	if m != nil {
		return m.HostDevName
	}
	return ""
}

func (m *FirecrackerNetworkInterface) GetAllowMMDS() bool {
	if m != nil {
		return m.AllowMMDS
	}
	return false
}

func (m *FirecrackerNetworkInterface) GetInRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.InRateLimiter
	}
	return nil
}

func (m *FirecrackerNetworkInterface) GetOutRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.OutRateLimiter
	}
	return nil
}

// Message to set the machine config for a Firecracker VM
type FirecrackerMachineConfiguration struct {
	CPUTemplate string `protobuf:"bytes,1,opt,name=CPUTemplate,json=cPUTemplate,proto3" json:"CPUTemplate,omitempty"`
	HtEnabled   bool   `protobuf:"varint,2,opt,name=HtEnabled,json=htEnabled,proto3" json:"HtEnabled,omitempty"`
	// Specifies the memory size of VM
	// This lets us create a Firecracker VM of up to 4096 TiB, which
	// for a mircroVM should be large enough
	MemSizeMib           uint32   `protobuf:"varint,3,opt,name=MemSizeMib,json=memSizeMib,proto3" json:"MemSizeMib,omitempty"`
	VcpuCount            uint32   `protobuf:"varint,4,opt,name=VcpuCount,json=vcpuCount,proto3" json:"VcpuCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerMachineConfiguration) Reset()         { *m = FirecrackerMachineConfiguration{} }
func (m *FirecrackerMachineConfiguration) String() string { return proto.CompactTextString(m) }
func (*FirecrackerMachineConfiguration) ProtoMessage()    {}
func (*FirecrackerMachineConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}
func (m *FirecrackerMachineConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerMachineConfiguration.Unmarshal(m, b)
}
func (m *FirecrackerMachineConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerMachineConfiguration.Marshal(b, m, deterministic)
}
func (m *FirecrackerMachineConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerMachineConfiguration.Merge(m, src)
}
func (m *FirecrackerMachineConfiguration) XXX_Size() int {
	return xxx_messageInfo_FirecrackerMachineConfiguration.Size(m)
}
func (m *FirecrackerMachineConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerMachineConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerMachineConfiguration proto.InternalMessageInfo

func (m *FirecrackerMachineConfiguration) GetCPUTemplate() string {
	if m != nil {
		return m.CPUTemplate
	}
	return ""
}

func (m *FirecrackerMachineConfiguration) GetHtEnabled() bool {
	if m != nil {
		return m.HtEnabled
	}
	return false
}

func (m *FirecrackerMachineConfiguration) GetMemSizeMib() uint32 {
	if m != nil {
		return m.MemSizeMib
	}
	return 0
}

func (m *FirecrackerMachineConfiguration) GetVcpuCount() uint32 {
	if m != nil {
		return m.VcpuCount
	}
	return 0
}

// Message to specify the block device config for a Firecracker VM
type FirecrackerDrive struct {
	IsReadOnly           bool                    `protobuf:"varint,1,opt,name=IsReadOnly,json=isReadOnly,proto3" json:"IsReadOnly,omitempty"`
	IsRootDevice         bool                    `protobuf:"varint,2,opt,name=IsRootDevice,json=isRootDevice,proto3" json:"IsRootDevice,omitempty"`
	Partuuid             string                  `protobuf:"bytes,3,opt,name=Partuuid,json=partuuid,proto3" json:"Partuuid,omitempty"`
	PathOnHost           string                  `protobuf:"bytes,4,opt,name=PathOnHost,json=pathOnHost,proto3" json:"PathOnHost,omitempty"`
	RateLimiter          *FirecrackerRateLimiter `protobuf:"bytes,5,opt,name=RateLimiter,json=rateLimiter,proto3" json:"RateLimiter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerDrive) Reset()         { *m = FirecrackerDrive{} }
func (m *FirecrackerDrive) String() string { return proto.CompactTextString(m) }
func (*FirecrackerDrive) ProtoMessage()    {}
func (*FirecrackerDrive) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}
func (m *FirecrackerDrive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerDrive.Unmarshal(m, b)
}
func (m *FirecrackerDrive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerDrive.Marshal(b, m, deterministic)
}
func (m *FirecrackerDrive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerDrive.Merge(m, src)
}
func (m *FirecrackerDrive) XXX_Size() int {
	return xxx_messageInfo_FirecrackerDrive.Size(m)
}
func (m *FirecrackerDrive) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerDrive.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerDrive proto.InternalMessageInfo

func (m *FirecrackerDrive) GetIsReadOnly() bool {
	if m != nil {
		return m.IsReadOnly
	}
	return false
}

func (m *FirecrackerDrive) GetIsRootDevice() bool {
	if m != nil {
		return m.IsRootDevice
	}
	return false
}

func (m *FirecrackerDrive) GetPartuuid() string {
	if m != nil {
		return m.Partuuid
	}
	return ""
}

func (m *FirecrackerDrive) GetPathOnHost() string {
	if m != nil {
		return m.PathOnHost
	}
	return ""
}

func (m *FirecrackerDrive) GetRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

// Message to specify an IO rate limiter with bytes/s and ops/s limits
type FirecrackerRateLimiter struct {
	Bandwidth            *FirecrackerTokenBucket `protobuf:"bytes,1,opt,name=Bandwidth,json=bandwidth,proto3" json:"Bandwidth,omitempty"`
	Ops                  *FirecrackerTokenBucket `protobuf:"bytes,2,opt,name=Ops,json=ops,proto3" json:"Ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerRateLimiter) Reset()         { *m = FirecrackerRateLimiter{} }
func (m *FirecrackerRateLimiter) String() string { return proto.CompactTextString(m) }
func (*FirecrackerRateLimiter) ProtoMessage()    {}
func (*FirecrackerRateLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}
func (m *FirecrackerRateLimiter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerRateLimiter.Unmarshal(m, b)
}
func (m *FirecrackerRateLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerRateLimiter.Marshal(b, m, deterministic)
}
func (m *FirecrackerRateLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerRateLimiter.Merge(m, src)
}
func (m *FirecrackerRateLimiter) XXX_Size() int {
	return xxx_messageInfo_FirecrackerRateLimiter.Size(m)
}
func (m *FirecrackerRateLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerRateLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerRateLimiter proto.InternalMessageInfo

func (m *FirecrackerRateLimiter) GetBandwidth() *FirecrackerTokenBucket {
	if m != nil {
		return m.Bandwidth
	}
	return nil
}

func (m *FirecrackerRateLimiter) GetOps() *FirecrackerTokenBucket {
	if m != nil {
		return m.Ops
	}
	return nil
}

// Message to specify a token buicket used to rate limit disk and network IO for a Firecracker VM
type FirecrackerTokenBucket struct {
	OneTimeBurst         int64    `protobuf:"varint,1,opt,name=OneTimeBurst,json=oneTimeBurst,proto3" json:"OneTimeBurst,omitempty"`
	RefillTime           int64    `protobuf:"varint,2,opt,name=RefillTime,json=refillTime,proto3" json:"RefillTime,omitempty"`
	Capacity             int64    `protobuf:"varint,3,opt,name=Capacity,json=capacity,proto3" json:"Capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerTokenBucket) Reset()         { *m = FirecrackerTokenBucket{} }
func (m *FirecrackerTokenBucket) String() string { return proto.CompactTextString(m) }
func (*FirecrackerTokenBucket) ProtoMessage()    {}
func (*FirecrackerTokenBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}
func (m *FirecrackerTokenBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerTokenBucket.Unmarshal(m, b)
}
func (m *FirecrackerTokenBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerTokenBucket.Marshal(b, m, deterministic)
}
func (m *FirecrackerTokenBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerTokenBucket.Merge(m, src)
}
func (m *FirecrackerTokenBucket) XXX_Size() int {
	return xxx_messageInfo_FirecrackerTokenBucket.Size(m)
}
func (m *FirecrackerTokenBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerTokenBucket.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerTokenBucket proto.InternalMessageInfo

func (m *FirecrackerTokenBucket) GetOneTimeBurst() int64 {
	if m != nil {
		return m.OneTimeBurst
	}
	return 0
}

func (m *FirecrackerTokenBucket) GetRefillTime() int64 {
	if m != nil {
		return m.RefillTime
	}
	return 0
}

func (m *FirecrackerTokenBucket) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtraData)(nil), "ExtraData")
	proto.RegisterType((*FirecrackerConfig)(nil), "FirecrackerConfig")
	proto.RegisterType((*FirecrackerNetworkInterface)(nil), "FirecrackerNetworkInterface")
	proto.RegisterType((*FirecrackerMachineConfiguration)(nil), "FirecrackerMachineConfiguration")
	proto.RegisterType((*FirecrackerDrive)(nil), "FirecrackerDrive")
	proto.RegisterType((*FirecrackerRateLimiter)(nil), "FirecrackerRateLimiter")
	proto.RegisterType((*FirecrackerTokenBucket)(nil), "FirecrackerTokenBucket")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0xc7, 0xa1, 0xaa, 0x49, 0xac, 0x91, 0xf3, 0x61, 0xa1, 0x68, 0xdd, 0x34, 0x68, 0x0d, 0x9f,
	0xdc, 0x8b, 0x03, 0xb8, 0x68, 0x81, 0x1e, 0x82, 0xd6, 0x1f, 0x29, 0xe2, 0xb4, 0x8e, 0x0d, 0x3a,
	0xed, 0xa1, 0x37, 0x5a, 0x1a, 0xdb, 0xac, 0x25, 0x52, 0xa0, 0x28, 0x27, 0xce, 0x6b, 0xf4, 0x01,
	0xfa, 0x24, 0x7d, 0x84, 0x7d, 0xa4, 0x05, 0x16, 0xa4, 0x25, 0x45, 0x36, 0xb2, 0xd9, 0xdd, 0x93,
	0xc0, 0xdf, 0x7f, 0x66, 0x38, 0xf3, 0x27, 0x45, 0x70, 0xd5, 0x26, 0xc6, 0xa4, 0x1d, 0x4b, 0xa1,
	0xc4, 0xf9, 0xd7, 0x0b, 0x21, 0x16, 0x21, 0x5e, 0x9a, 0xd5, 0x2c, 0x9d, 0x5f, 0x52, 0xbe, 0xd9,
	0x4a, 0xcd, 0xff, 0x2d, 0x70, 0xae, 0x1f, 0x95, 0xa4, 0x03, 0xaa, 0xa8, 0x77, 0x0e, 0x95, 0xdb,
	0x44, 0xf0, 0x69, 0x8c, 0x7e, 0xdd, 0x6a, 0x58, 0xad, 0x2a, 0xa9, 0xfc, 0x93, 0xad, 0xbd, 0x9f,
	0xc0, 0x25, 0x29, 0xf7, 0xc7, 0xb1, 0x62, 0x82, 0x27, 0xf5, 0xcf, 0x1a, 0x56, 0xcb, 0xed, 0x7c,
	0xd1, 0xde, 0x96, 0x6e, 0xe7, 0xa5, 0xdb, 0x5d, 0xbe, 0x21, 0xae, 0x7c, 0x0e, 0xf4, 0x2e, 0xc0,
	0x99, 0xaa, 0x80, 0xf1, 0x89, 0x90, 0xaa, 0x6e, 0x37, 0xac, 0xd6, 0x31, 0x71, 0x92, 0x1c, 0x78,
	0xdf, 0x02, 0x4c, 0x55, 0x20, 0x52, 0x65, 0xe4, 0xcf, 0x8d, 0x0c, 0x49, 0x41, 0x32, 0x1d, 0xa5,
	0x34, 0xfa, 0x41, 0xa1, 0x67, 0xa4, 0xf9, 0xaf, 0x0d, 0xb5, 0xdf, 0x98, 0x44, 0x5f, 0x52, 0x7f,
	0x85, 0xb2, 0x2f, 0xf8, 0x9c, 0x2d, 0xf6, 0x7b, 0xb5, 0x3e, 0xb6, 0xd7, 0x5b, 0xa8, 0xdd, 0xa1,
	0x7a, 0x10, 0x72, 0x35, 0xe4, 0x0a, 0xe5, 0x9c, 0xfa, 0xa8, 0x27, 0xb5, 0x5b, 0x6e, 0xe7, 0xa2,
	0x5d, 0xda, 0x66, 0x3f, 0x88, 0xd4, 0xf8, 0x7e, 0x9a, 0xd7, 0x82, 0xd3, 0xdf, 0x51, 0x72, 0x0c,
	0x87, 0x11, 0x5d, 0xe0, 0x84, 0xaa, 0xa5, 0x99, 0xde, 0x21, 0xa7, 0xab, 0x5d, 0xac, 0x67, 0xdc,
	0x46, 0x76, 0xe5, 0x22, 0x31, 0x1e, 0x38, 0x04, 0x56, 0x05, 0xf1, 0x7e, 0x05, 0x18, 0x51, 0x7f,
	0xc9, 0x38, 0xf6, 0xe7, 0x0b, 0xe3, 0x81, 0xdb, 0x69, 0x94, 0xdb, 0xc9, 0x55, 0x33, 0x7c, 0x2a,
	0xa9, 0x1e, 0x86, 0x40, 0x54, 0xe4, 0x78, 0x97, 0xe0, 0x10, 0x21, 0xd4, 0x40, 0xb2, 0x35, 0xd6,
	0x0f, 0x4d, 0x81, 0x5a, 0xb9, 0x80, 0x11, 0x88, 0x23, 0xf3, 0x18, 0xef, 0x0a, 0xce, 0xba, 0x41,
	0xc0, 0x74, 0x21, 0x1a, 0x1a, 0x94, 0xd4, 0x8f, 0x8c, 0x0f, 0x2f, 0xe4, 0x9d, 0xd1, 0xbd, 0xd0,
	0xe6, 0x5b, 0x0b, 0xbe, 0x79, 0xc5, 0x2e, 0x3d, 0xf1, 0x88, 0xfa, 0xdd, 0x20, 0x90, 0x98, 0x6c,
	0x8f, 0xc7, 0x31, 0xfd, 0x66, 0xc4, 0x6b, 0x80, 0x7b, 0x23, 0x12, 0x35, 0xc0, 0xf5, 0x1d, 0x8d,
	0xd0, 0xdc, 0x35, 0x87, 0xb8, 0xcb, 0x67, 0xa4, 0x6f, 0x55, 0x37, 0x0c, 0xc5, 0xc3, 0x68, 0x34,
	0x98, 0x1a, 0x5f, 0x2b, 0xc4, 0xa1, 0x39, 0xf0, 0xae, 0xe0, 0x78, 0xc8, 0x09, 0x55, 0xf8, 0x07,
	0x8b, 0x98, 0x42, 0x69, 0x4c, 0x75, 0x3b, 0x5f, 0x95, 0x7b, 0x2f, 0xc9, 0xe4, 0x98, 0x95, 0xa3,
	0xbd, 0x5f, 0xe0, 0x64, 0x9c, 0xaa, 0x72, 0xfe, 0xc1, 0xeb, 0xf9, 0x27, 0x62, 0x27, 0xbc, 0xf9,
	0x9f, 0x05, 0xdf, 0x7d, 0xe0, 0x7c, 0xf4, 0x8c, 0xfd, 0xc9, 0x9f, 0xf7, 0x18, 0xc5, 0x21, 0x55,
	0x98, 0x99, 0xe0, 0xfa, 0xcf, 0x48, 0xcf, 0x78, 0xa3, 0xae, 0x39, 0x9d, 0x85, 0x18, 0x18, 0x0f,
	0x2a, 0xc4, 0x59, 0xe6, 0xc0, 0x78, 0x88, 0xd1, 0x94, 0x3d, 0xe1, 0x88, 0xcd, 0xb2, 0x1f, 0x0b,
	0xa2, 0x82, 0xe8, 0xec, 0xbf, 0xfc, 0x38, 0xed, 0x8b, 0x94, 0xe7, 0x3f, 0x96, 0xb3, 0xce, 0x41,
	0xf3, 0x8d, 0x05, 0x67, 0xfb, 0x07, 0xa9, 0x4b, 0x0e, 0x13, 0x82, 0x34, 0x18, 0xf3, 0x70, 0x63,
	0x3a, 0xaa, 0x10, 0x60, 0x05, 0xf1, 0x9a, 0x50, 0x1d, 0x26, 0xe6, 0x22, 0xe1, 0x9a, 0xf9, 0x98,
	0xf5, 0x54, 0x65, 0x25, 0xa6, 0x9f, 0x90, 0x09, 0x95, 0x2a, 0x4d, 0x59, 0x90, 0xdd, 0xf7, 0x4a,
	0x9c, 0xad, 0x75, 0x7d, 0x7d, 0xe1, 0xc7, 0x5c, 0x1f, 0x6e, 0x7e, 0xd1, 0xe3, 0x82, 0x78, 0x3f,
	0x83, 0xfb, 0x09, 0xa6, 0xbb, 0xb2, 0xe4, 0xf8, 0x13, 0x7c, 0xf9, 0x72, 0x98, 0xf7, 0x23, 0x38,
	0x3d, 0xca, 0x83, 0x07, 0x16, 0xa8, 0x65, 0xf6, 0x12, 0xec, 0x94, 0xbc, 0x17, 0x2b, 0xe4, 0xbd,
	0xd4, 0x5f, 0xa1, 0x22, 0xce, 0x2c, 0x8f, 0xf4, 0xbe, 0x07, 0x7b, 0x1c, 0xe7, 0xcf, 0xdc, 0x7b,
	0x13, 0x6c, 0x11, 0x27, 0xcd, 0xc7, 0x9d, 0xbd, 0x4b, 0xb2, 0x36, 0x6c, 0xcc, 0xf1, 0x9e, 0x45,
	0xd8, 0x4b, 0x65, 0xa2, 0xcc, 0xf6, 0x36, 0xa9, 0x8a, 0x12, 0xd3, 0xa6, 0x10, 0x9c, 0xb3, 0x30,
	0xd4, 0xc8, 0xec, 0x67, 0x13, 0x90, 0x05, 0xd1, 0x86, 0xf6, 0x69, 0x4c, 0x7d, 0xa6, 0x36, 0xc6,
	0x50, 0x9b, 0x54, 0xfc, 0x6c, 0xdd, 0x3b, 0xfa, 0xfb, 0x60, 0xfb, 0x98, 0x1d, 0x9a, 0xcf, 0x0f,
	0xef, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x4d, 0xe2, 0x2e, 0xf7, 0x05, 0x00, 0x00,
}
