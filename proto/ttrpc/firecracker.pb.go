// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firecracker.proto

package proto

import (
	context "context"
	fmt "fmt"
	github_com_containerd_ttrpc "github.com/containerd/ttrpc"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CreateVMRequest specifies creation parameters for a new FC instance
type CreateVMRequest struct {
	// VM identifier to assign
	VMID string `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
	// Specifies the machine configuration for the VM
	MachineCfg *FirecrackerMachineConfiguration `protobuf:"bytes,2,opt,name=MachineCfg,json=machineCfg,proto3" json:"MachineCfg,omitempty"`
	// Specifies the file path where the kernel image is located
	KernelImagePath string `protobuf:"bytes,3,opt,name=KernelImagePath,json=kernelImagePath,proto3" json:"KernelImagePath,omitempty"`
	// Specifies the commandline arguments that should be passed to the kernel
	KernelArgs string `protobuf:"bytes,4,opt,name=KernelArgs,json=kernelArgs,proto3" json:"KernelArgs,omitempty"`
	// Specifies the root block device for the VM
	RootDrive *FirecrackerDrive `protobuf:"bytes,5,opt,name=RootDrive,json=rootDrive,proto3" json:"RootDrive,omitempty"`
	// Specifies the additional block device config for the VM.
	AdditionalDrives []*FirecrackerDrive `protobuf:"bytes,6,rep,name=AdditionalDrives,json=additionalDrives,proto3" json:"AdditionalDrives,omitempty"`
	// Specifies the networking configuration for a VM
	NetworkInterfaces []*FirecrackerNetworkInterface `protobuf:"bytes,7,rep,name=NetworkInterfaces,json=networkInterfaces,proto3" json:"NetworkInterfaces,omitempty"`
	// The number of dummy drives to reserve in advance before running FC instance.
	ContainerCount       int32    `protobuf:"varint,8,opt,name=ContainerCount,json=containerCount,proto3" json:"ContainerCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVMRequest) Reset()      { *m = CreateVMRequest{} }
func (*CreateVMRequest) ProtoMessage() {}
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{0}
}
func (m *CreateVMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVMRequest.Merge(m, src)
}
func (m *CreateVMRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVMRequest proto.InternalMessageInfo

type StopVMRequest struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopVMRequest) Reset()      { *m = StopVMRequest{} }
func (*StopVMRequest) ProtoMessage() {}
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{1}
}
func (m *StopVMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopVMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopVMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopVMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopVMRequest.Merge(m, src)
}
func (m *StopVMRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopVMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopVMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopVMRequest proto.InternalMessageInfo

type GetVMInfoRequest struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVMInfoRequest) Reset()      { *m = GetVMInfoRequest{} }
func (*GetVMInfoRequest) ProtoMessage() {}
func (*GetVMInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{2}
}
func (m *GetVMInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVMInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVMInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVMInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVMInfoRequest.Merge(m, src)
}
func (m *GetVMInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetVMInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVMInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVMInfoRequest proto.InternalMessageInfo

type GetVMInfoResponse struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
	ContextID            uint32   `protobuf:"varint,2,opt,name=ContextID,json=contextID,proto3" json:"ContextID,omitempty"`
	SocketPath           string   `protobuf:"bytes,3,opt,name=SocketPath,json=socketPath,proto3" json:"SocketPath,omitempty"`
	LogFifoPath          string   `protobuf:"bytes,4,opt,name=LogFifoPath,json=logFifoPath,proto3" json:"LogFifoPath,omitempty"`
	MetricsFifoPath      string   `protobuf:"bytes,5,opt,name=MetricsFifoPath,json=metricsFifoPath,proto3" json:"MetricsFifoPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVMInfoResponse) Reset()      { *m = GetVMInfoResponse{} }
func (*GetVMInfoResponse) ProtoMessage() {}
func (*GetVMInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{3}
}
func (m *GetVMInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVMInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVMInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVMInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVMInfoResponse.Merge(m, src)
}
func (m *GetVMInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVMInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVMInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVMInfoResponse proto.InternalMessageInfo

type SetVMMetadataRequest struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,json=vMID,proto3" json:"VMID,omitempty"`
	Metadata             string   `protobuf:"bytes,2,opt,name=Metadata,json=metadata,proto3" json:"Metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetVMMetadataRequest) Reset()      { *m = SetVMMetadataRequest{} }
func (*SetVMMetadataRequest) ProtoMessage() {}
func (*SetVMMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a73317e9fb8da571, []int{4}
}
func (m *SetVMMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVMMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVMMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVMMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVMMetadataRequest.Merge(m, src)
}
func (m *SetVMMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetVMMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVMMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetVMMetadataRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateVMRequest)(nil), "CreateVMRequest")
	proto.RegisterType((*StopVMRequest)(nil), "StopVMRequest")
	proto.RegisterType((*GetVMInfoRequest)(nil), "GetVMInfoRequest")
	proto.RegisterType((*GetVMInfoResponse)(nil), "GetVMInfoResponse")
	proto.RegisterType((*SetVMMetadataRequest)(nil), "SetVMMetadataRequest")
}

func init() { proto.RegisterFile("firecracker.proto", fileDescriptor_a73317e9fb8da571) }

var fileDescriptor_a73317e9fb8da571 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x8f, 0xd2, 0x50,
	0x14, 0x9d, 0xca, 0x87, 0xf4, 0x12, 0x3e, 0xfa, 0xa2, 0xa6, 0xc1, 0x49, 0x6d, 0x30, 0x99, 0xb0,
	0x2a, 0x06, 0xdd, 0x6a, 0x1c, 0x41, 0x4c, 0xd5, 0x1a, 0x53, 0x12, 0x16, 0xee, 0x9e, 0xe5, 0xb6,
	0xd3, 0x00, 0xef, 0xe1, 0xeb, 0x63, 0x74, 0x76, 0xfe, 0x09, 0x7f, 0x88, 0xff, 0x62, 0x96, 0x2e,
	0x5d, 0x3a, 0xec, 0xfc, 0x17, 0xa6, 0xaf, 0x53, 0x06, 0x90, 0x61, 0xd5, 0xdc, 0x73, 0xcf, 0xc9,
	0x3d, 0x7d, 0xe7, 0x5e, 0x30, 0xc2, 0x58, 0x60, 0x20, 0x68, 0x30, 0x45, 0xe1, 0x2c, 0x04, 0x97,
	0xbc, 0xf5, 0x30, 0xe2, 0x3c, 0x9a, 0x61, 0x57, 0x55, 0x9f, 0x97, 0x61, 0x17, 0xe7, 0x0b, 0x79,
	0x71, 0xdd, 0xac, 0xca, 0x8b, 0x05, 0x26, 0x59, 0xd1, 0xfe, 0x51, 0x80, 0x46, 0x5f, 0x20, 0x95,
	0x38, 0xf6, 0x7c, 0xfc, 0xb2, 0xc4, 0x44, 0x12, 0x02, 0xc5, 0xb1, 0xe7, 0x0e, 0x4c, 0xcd, 0xd6,
	0x3a, 0xba, 0x5f, 0x3c, 0xf7, 0xdc, 0x01, 0x79, 0x09, 0xe0, 0xd1, 0xe0, 0x2c, 0x66, 0xd8, 0x0f,
	0x23, 0xf3, 0x8e, 0xad, 0x75, 0xaa, 0x3d, 0xdb, 0x19, 0xde, 0x4c, 0xce, 0xbb, 0x9c, 0x85, 0x71,
	0xb4, 0x14, 0x54, 0xc6, 0x9c, 0xf9, 0x30, 0x5f, 0x6b, 0x48, 0x07, 0x1a, 0xef, 0x50, 0x30, 0x9c,
	0xb9, 0x73, 0x1a, 0xe1, 0x47, 0x2a, 0xcf, 0xcc, 0x82, 0x1a, 0xd0, 0x98, 0x6e, 0xc3, 0xc4, 0x02,
	0xc8, 0x98, 0xa7, 0x22, 0x4a, 0xcc, 0xa2, 0x22, 0xc1, 0x74, 0x8d, 0x90, 0x2e, 0xe8, 0x3e, 0xe7,
	0x72, 0x20, 0xe2, 0x73, 0x34, 0x4b, 0xca, 0x8a, 0xb1, 0x69, 0x45, 0x35, 0x7c, 0x5d, 0xe4, 0x1c,
	0xf2, 0x1c, 0x9a, 0xa7, 0x93, 0x49, 0x9c, 0x5a, 0xa2, 0x33, 0x05, 0x25, 0x66, 0xd9, 0x2e, 0xec,
	0xd7, 0x35, 0xe9, 0x0e, 0x95, 0xbc, 0x05, 0xe3, 0x03, 0xca, 0xaf, 0x5c, 0x4c, 0x5d, 0x26, 0x51,
	0x84, 0x34, 0xc0, 0xc4, 0xbc, 0xab, 0xf4, 0xc7, 0x9b, 0xfa, 0x5d, 0x92, 0x6f, 0xb0, 0x5d, 0x19,
	0x39, 0x81, 0x7a, 0x9f, 0x33, 0x49, 0x63, 0x86, 0xa2, 0xcf, 0x97, 0x4c, 0x9a, 0x15, 0x5b, 0xeb,
	0x94, 0xfc, 0x7a, 0xb0, 0x85, 0xb6, 0x1f, 0x43, 0x6d, 0x24, 0xf9, 0xe2, 0x60, 0x28, 0xed, 0x13,
	0x68, 0xbe, 0x41, 0x39, 0xf6, 0x5c, 0x16, 0xf2, 0x43, 0xbc, 0x9f, 0x1a, 0x18, 0x1b, 0xc4, 0x64,
	0xc1, 0x59, 0x82, 0x7b, 0x63, 0x3e, 0x06, 0x3d, 0xb5, 0x87, 0xdf, 0xa4, 0x3b, 0x50, 0x29, 0xd7,
	0x7c, 0x3d, 0xc8, 0x81, 0x34, 0x98, 0x11, 0x0f, 0xa6, 0x28, 0x37, 0xd2, 0x83, 0x64, 0x8d, 0x10,
	0x1b, 0xaa, 0xef, 0x79, 0x34, 0x8c, 0x43, 0xae, 0x08, 0x59, 0x72, 0xd5, 0xd9, 0x0d, 0x94, 0x2e,
	0x81, 0x87, 0x52, 0xc4, 0x41, 0xb2, 0x66, 0x95, 0xb2, 0x25, 0x98, 0x6f, 0xc3, 0xed, 0x21, 0xdc,
	0x1b, 0xa5, 0x96, 0x3d, 0x94, 0x74, 0x42, 0x25, 0x3d, 0xb4, 0x9c, 0x2d, 0xa8, 0xe4, 0x34, 0x65,
	0x5a, 0xf7, 0x2b, 0xf3, 0xeb, 0xba, 0xf7, 0x57, 0x83, 0xea, 0x46, 0x46, 0xe4, 0x19, 0x54, 0xf2,
	0x7d, 0x27, 0x4d, 0x67, 0x67, 0xf5, 0x5b, 0x0f, 0x9c, 0xec, 0x72, 0x9c, 0xfc, 0x72, 0x9c, 0xd7,
	0xe9, 0xe5, 0x90, 0x27, 0x50, 0xce, 0xe2, 0x20, 0x75, 0x67, 0x2b, 0x97, 0x5b, 0x15, 0x3d, 0xd0,
	0xd7, 0x4f, 0x4e, 0x0c, 0x67, 0x37, 0xa7, 0x16, 0x71, 0xfe, 0x4f, 0xe4, 0x05, 0xd4, 0xb6, 0xfe,
	0x99, 0xdc, 0x77, 0xf6, 0xbd, 0xc1, 0x6d, 0x33, 0x5f, 0x3d, 0xba, 0xbc, 0xb2, 0x8e, 0x7e, 0x5f,
	0x59, 0x47, 0xdf, 0x57, 0x96, 0x76, 0xb9, 0xb2, 0xb4, 0x5f, 0x2b, 0x4b, 0xfb, 0xb3, 0xb2, 0xb4,
	0x4f, 0xa5, 0x8c, 0x59, 0x56, 0x9f, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x42, 0xe9, 0xd8,
	0x58, 0x33, 0x04, 0x00, 0x00,
}

func (m *CreateVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.MachineCfg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.MachineCfg.Size()))
		n1, err1 := m.MachineCfg.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.KernelImagePath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.KernelImagePath)))
		i += copy(dAtA[i:], m.KernelImagePath)
	}
	if len(m.KernelArgs) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.KernelArgs)))
		i += copy(dAtA[i:], m.KernelArgs)
	}
	if m.RootDrive != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.RootDrive.Size()))
		n2, err2 := m.RootDrive.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if len(m.AdditionalDrives) > 0 {
		for _, msg := range m.AdditionalDrives {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFirecracker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, msg := range m.NetworkInterfaces {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintFirecracker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ContainerCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.ContainerCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StopVMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopVMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVMInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVMInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetVMInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVMInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if m.ContextID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(m.ContextID))
	}
	if len(m.SocketPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.SocketPath)))
		i += copy(dAtA[i:], m.SocketPath)
	}
	if len(m.LogFifoPath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.LogFifoPath)))
		i += copy(dAtA[i:], m.LogFifoPath)
	}
	if len(m.MetricsFifoPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.MetricsFifoPath)))
		i += copy(dAtA[i:], m.MetricsFifoPath)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetVMMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVMMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VMID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.VMID)))
		i += copy(dAtA[i:], m.VMID)
	}
	if len(m.Metadata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFirecracker(dAtA, i, uint64(len(m.Metadata)))
		i += copy(dAtA[i:], m.Metadata)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFirecracker(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateVMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.MachineCfg != nil {
		l = m.MachineCfg.Size()
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.KernelImagePath)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.KernelArgs)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.RootDrive != nil {
		l = m.RootDrive.Size()
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if len(m.AdditionalDrives) > 0 {
		for _, e := range m.AdditionalDrives {
			l = e.Size()
			n += 1 + l + sovFirecracker(uint64(l))
		}
	}
	if len(m.NetworkInterfaces) > 0 {
		for _, e := range m.NetworkInterfaces {
			l = e.Size()
			n += 1 + l + sovFirecracker(uint64(l))
		}
	}
	if m.ContainerCount != 0 {
		n += 1 + sovFirecracker(uint64(m.ContainerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopVMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVMInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetVMInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.ContextID != 0 {
		n += 1 + sovFirecracker(uint64(m.ContextID))
	}
	l = len(m.SocketPath)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.LogFifoPath)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.MetricsFifoPath)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetVMMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovFirecracker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFirecracker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFirecracker(x uint64) (n int) {
	return sovFirecracker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateVMRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAdditionalDrives := "[]*FirecrackerDrive{"
	for _, f := range this.AdditionalDrives {
		repeatedStringForAdditionalDrives += strings.Replace(fmt.Sprintf("%v", f), "FirecrackerDrive", "FirecrackerDrive", 1) + ","
	}
	repeatedStringForAdditionalDrives += "}"
	repeatedStringForNetworkInterfaces := "[]*FirecrackerNetworkInterface{"
	for _, f := range this.NetworkInterfaces {
		repeatedStringForNetworkInterfaces += strings.Replace(fmt.Sprintf("%v", f), "FirecrackerNetworkInterface", "FirecrackerNetworkInterface", 1) + ","
	}
	repeatedStringForNetworkInterfaces += "}"
	s := strings.Join([]string{`&CreateVMRequest{`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`MachineCfg:` + strings.Replace(fmt.Sprintf("%v", this.MachineCfg), "FirecrackerMachineConfiguration", "FirecrackerMachineConfiguration", 1) + `,`,
		`KernelImagePath:` + fmt.Sprintf("%v", this.KernelImagePath) + `,`,
		`KernelArgs:` + fmt.Sprintf("%v", this.KernelArgs) + `,`,
		`RootDrive:` + strings.Replace(fmt.Sprintf("%v", this.RootDrive), "FirecrackerDrive", "FirecrackerDrive", 1) + `,`,
		`AdditionalDrives:` + repeatedStringForAdditionalDrives + `,`,
		`NetworkInterfaces:` + repeatedStringForNetworkInterfaces + `,`,
		`ContainerCount:` + fmt.Sprintf("%v", this.ContainerCount) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StopVMRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StopVMRequest{`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVMInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVMInfoRequest{`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVMInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVMInfoResponse{`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`ContextID:` + fmt.Sprintf("%v", this.ContextID) + `,`,
		`SocketPath:` + fmt.Sprintf("%v", this.SocketPath) + `,`,
		`LogFifoPath:` + fmt.Sprintf("%v", this.LogFifoPath) + `,`,
		`MetricsFifoPath:` + fmt.Sprintf("%v", this.MetricsFifoPath) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetVMMetadataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVMMetadataRequest{`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`Metadata:` + fmt.Sprintf("%v", this.Metadata) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFirecracker(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

type FirecrackerService interface {
	CreateVM(ctx context.Context, req *CreateVMRequest) (*empty.Empty, error)
	StopVM(ctx context.Context, req *StopVMRequest) (*empty.Empty, error)
	GetVMInfo(ctx context.Context, req *GetVMInfoRequest) (*GetVMInfoResponse, error)
	SetVMMetadata(ctx context.Context, req *SetVMMetadataRequest) (*empty.Empty, error)
}

func RegisterFirecrackerService(srv *github_com_containerd_ttrpc.Server, svc FirecrackerService) {
	srv.Register("Firecracker", map[string]github_com_containerd_ttrpc.Method{
		"CreateVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req CreateVMRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.CreateVM(ctx, &req)
		},
		"StopVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req StopVMRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.StopVM(ctx, &req)
		},
		"GetVMInfo": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req GetVMInfoRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.GetVMInfo(ctx, &req)
		},
		"SetVMMetadata": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req SetVMMetadataRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.SetVMMetadata(ctx, &req)
		},
	})
}

type firecrackerClient struct {
	client *github_com_containerd_ttrpc.Client
}

func NewFirecrackerClient(client *github_com_containerd_ttrpc.Client) FirecrackerService {
	return &firecrackerClient{
		client: client,
	}
}

func (c *firecrackerClient) CreateVM(ctx context.Context, req *CreateVMRequest) (*empty.Empty, error) {
	var resp empty.Empty
	if err := c.client.Call(ctx, "Firecracker", "CreateVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) StopVM(ctx context.Context, req *StopVMRequest) (*empty.Empty, error) {
	var resp empty.Empty
	if err := c.client.Call(ctx, "Firecracker", "StopVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) GetVMInfo(ctx context.Context, req *GetVMInfoRequest) (*GetVMInfoResponse, error) {
	var resp GetVMInfoResponse
	if err := c.client.Call(ctx, "Firecracker", "GetVMInfo", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) SetVMMetadata(ctx context.Context, req *SetVMMetadataRequest) (*empty.Empty, error) {
	var resp empty.Empty
	if err := c.client.Call(ctx, "Firecracker", "SetVMMetadata", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
func (m *CreateVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MachineCfg == nil {
				m.MachineCfg = &FirecrackerMachineConfiguration{}
			}
			if err := m.MachineCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootDrive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootDrive == nil {
				m.RootDrive = &FirecrackerDrive{}
			}
			if err := m.RootDrive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDrives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalDrives = append(m.AdditionalDrives, &FirecrackerDrive{})
			if err := m.AdditionalDrives[len(m.AdditionalDrives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterfaces = append(m.NetworkInterfaces, &FirecrackerNetworkInterface{})
			if err := m.NetworkInterfaces[len(m.NetworkInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerCount", wireType)
			}
			m.ContainerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopVMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopVMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopVMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVMInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVMInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVMInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVMInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVMInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVMInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextID", wireType)
			}
			m.ContextID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContextID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogFifoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogFifoPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsFifoPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricsFifoPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVMMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVMMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVMMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirecracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirecracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirecracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirecracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFirecracker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFirecracker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirecracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFirecracker
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFirecracker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFirecracker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFirecracker(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFirecracker
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFirecracker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFirecracker   = fmt.Errorf("proto: integer overflow")
)
